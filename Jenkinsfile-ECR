@Library('my-shared-lib') _

pipeline {
    agent any

parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: "nAWS account id", defaultValue: '555138969324')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'bhanuayikam')
}

    stages{
	
        stage('Code Checkout'){
	    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                url: "https://github.com/Bhanu-Ganga-DevOPs/Jenkins-Shared-Docker-Multistagee.git"

            )
            }
        }
        stage('UNIT TEST'){
	    when { expression {  params.action == 'create' } }

            steps{
                script{
                    mvnTest()
                }
            }
        }

	    stage('Intergration Test'){
        when { expression {  params.action == 'create' } }        
   
	         steps{
                script{
                    mvnIntegrationTest()
                }
            }
        }
    	stage('Static Code Analysis'){
	    when { expression {  params.action == 'create' } }
            steps{
                script{
                    def sonarQubecredentialsId = 'sonarqube-api'
                    staticCodeAnalysis(sonarQubecredentialsId)
                }
            }
        }

        stage('Quality gate status check : Sonarqube'){
	    when { expression {  params.action == 'create' } }
            steps{
                script{
                    def sonarQubecredentialsId = 'sonarqube-api'
                    qualityGateStatus(sonarQubecredentialsId)
                }
            }
        }

        stage('Maven Build'){
	    when { expression {  params.action == 'create' } }
            steps{
                script{
                    
                    mvnBuild()
                }
            }
        }

       stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        } 
        
    }
}
